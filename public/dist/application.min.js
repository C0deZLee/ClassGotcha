"use strict";var ApplicationConfiguration=function(){var applicationModuleName="ClassGotcha",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("admin",["datatables","ngFileUpload","ngImgCrop"]),ApplicationConfiguration.registerModule("classrooms",[]),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("moments"),ApplicationConfiguration.registerModule("users"),angular.module("admin").run(["Menus",function(Menus){Menus.addMenuItem("sidebar",{title:"Dashboard",iconClass:"fa-check",state:"admin",type:"dropdown"}),Menus.addSubMenuItem("sidebar","admin",{title:"Dashboard",state:"admin"}),Menus.addSubMenuItem("sidebar","admin",{title:"Users",state:"users"}),Menus.addSubMenuItem("sidebar","admin",{title:"Notes",state:"notes"}),Menus.addSubMenuItem("sidebar","admin",{title:"Classrooms",state:"classrooms"}),Menus.addSubMenuItem("sidebar","admin",{title:"Professors",state:"professors"})}]),angular.module("admin").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("admin",{url:"/admin",templateUrl:"modules/admin/views/dashboard.client.view.html"}).state("users",{url:"/admin/users",templateUrl:"modules/admin/views/users.client.view.html"}).state("notes",{url:"/admin/notes",templateUrl:"modules/admin/views/notes.client.view.html"}).state("classrooms",{url:"/admin/classrooms",templateUrl:"modules/admin/views/classroom.client.view.html"}).state("professors",{url:"/admin/professors",templateUrl:"modules/admin/views/prof.client.view.html"})}]),angular.module("admin").run(["ApiLists",function(ApiLists){ApiLists.addApiList("classroomApi"),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/all",method:"get",description:"Get all classrooms",state:"unstable",version:"0.1"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/:id",role:"everyone",method:"get",description:"Get classroom by ID",state:"stable",version:"0.1"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/:id/info",role:"everyone",method:"get",description:"Get the basic info of the classroom",state:"stable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/:id",method:"put",description:"Update classroom by id",state:"stable",version:"0.1"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class",method:"post",description:"Create a new classroom",state:"stable",version:"0.1"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/:id",method:"delete",description:"Delete classroom by id",state:"stable",version:"0.1"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/:id/students",role:"user",method:"get",description:"Get all students of the current classroom",state:"stable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/:id/students",role:"user",method:"post",description:"Push a new student into the classroom",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/:id/notes",role:"user",method:"get",description:"Get all notes of the current classroom",state:"stable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/:id/notes",role:"user",method:"post",description:"Push a new note into the classroom",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/:id/dues",role:"user",method:"get",description:"Get all dues of the current classroom",state:"stable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("classroomApi",{url:"/api/0.1/class/:id/dues",role:"user",method:"post",description:"Push a new due into the classroom",state:"unstable",version:"0.1",implemented:"false"})}]),angular.module("admin").run(["ApiLists",function(ApiLists){ApiLists.addApiList("noteApi"),ApiLists.addApiItem("noteApi",{url:"/api/0.1/note/all",method:"get",description:"Get all notes",state:"unstable",version:"0.1"}),ApiLists.addApiItem("noteApi",{url:"/api/0.1/note",role:"user",method:"post",description:"Create a new note",state:"stable",version:"0.1"}),ApiLists.addApiItem("noteApi",{url:"/api/0.1/note/:id",role:"everyone",method:"get",description:"Get note by ID",state:"stable",version:"0.1"}),ApiLists.addApiItem("noteApi",{url:"/api/0.1/note/:id",role:"user",method:"put",description:"Update note by id",state:"stable",version:"0.1"}),ApiLists.addApiItem("noteApi",{url:"/api/0.1/note/:id",role:"user",method:"delete",description:"Delete note by id",state:"stable",version:"0.1"}),ApiLists.addApiItem("noteApi",{url:"/api/0.1/note/:id/rate",role:"user",method:"post",description:"Post a new rate",state:"stable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("noteApi",{url:"/api/0.1/note/:id/rate",role:"everyone",method:"get",description:"Get note's rate",state:"stable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("noteApi",{url:"/api/0.1/note/:id",role:"user",method:"put",description:"Update note by id",state:"stable",version:"0.1",implemented:"false"})}]),angular.module("admin").run(["ApiLists",function(ApiLists){ApiLists.addApiList("profApi"),ApiLists.addApiItem("profApi",{url:"/api/0.1/prof/all",method:"get",description:"Get all professor",state:"unstable",version:"0.1"}),ApiLists.addApiItem("profApi",{url:"/api/0.1/prof/:id",role:"everyone",method:"get",description:"Get prof by ID",state:"stable",version:"0.1"}),ApiLists.addApiItem("profApi",{url:"/api/0.1/prof",role:"admin",method:"post",description:"Create a new professor",state:"stable",version:"0.1"}),ApiLists.addApiItem("profApi",{url:"/api/0.1/prof/:id",role:"admin",method:"put",description:"Update professor by id",state:"stable",version:"0.1"}),ApiLists.addApiItem("profApi",{url:"/api/0.1/prof/:id",role:"admin",method:"delete",description:"Delete a professor by id",state:"stable",version:"0.1"}),ApiLists.addApiItem("profApi",{url:"/api/0.1/prof/:id/class",role:"admin",method:"post",description:"Push a new class into prof",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("profApi",{url:"/api/0.1/prof/:id/class",role:"admin",method:"delete",description:"Remove a class from professor instance",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("profApi",{url:"/api/0.1/prof/:id/rate",role:"user",method:"post",description:"Push a new rate into prof",state:"unstable",version:"0.1"}),ApiLists.addApiItem("profApi",{url:"/api/0.1/prof/:id/rate",role:"user",method:"put",description:"Update a rate from professor instance",state:"unstable",version:"0.1"})}]),angular.module("admin").run(["ApiLists",function(ApiLists){ApiLists.addApiList("userApi"),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/me",method:"get",role:"user",description:"Get the current user's data",state:"stable",version:"0.1"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/me/moments",method:"get",role:"user",description:"Get the current user's all moments",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/me/moments/:id",method:"get",role:"user",description:"Get the current user's moment by ID",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/me/notes",method:"get",role:"user",description:"Get the current user's all notes",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/me/notes/:id",method:"get",role:"user",description:"Get the current user's notes by ID",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/all",method:"get",description:"Get all user's data",state:"deprecated",version:"0.1"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/:id",method:"get",description:"Get the user's data by id",state:"stable",version:"0.1"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/:id",method:"put",description:"Update the user's data by id",state:"stable",version:"0.1"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/:id",method:"delete",description:"Delete the user's data by id",state:"stable",version:"0.1"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user",method:"post",description:"Create an account on server side",state:"stable",version:"0.1"}),ApiLists.addApiItem("userApi",{url:"/auth/signup",method:"post",role:"everyone",description:"Sign up an account",state:"unstable",version:"0.1"}),ApiLists.addApiItem("userApi",{url:"/auth/signin",method:"post",role:"everyone",description:"Sign in an account",state:"unstable",version:"0.1"}),ApiLists.addApiItem("userApi",{url:"/auth/signout",method:"get",role:"user",description:"Sign out",state:"unstable",version:"0.1"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/:id/moments",method:"get",description:"Get all moments of this account",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/:id/moments/:id2",method:"get",description:"Get a specific moment of this account by ID",state:"stable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/:id/dues",method:"get",description:"Get all dues of an account",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/:id/dues/:id2",method:"get",description:"Get a specific due of this account by ID",state:"stable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/:id/notes",method:"get",description:"Get all notes of an account",state:"unstable",version:"0.1",implemented:"false"}),ApiLists.addApiItem("userApi",{url:"/api/0.1/user/:id/notes/:id2",method:"get",description:"Get a specific note of this account by ID",state:"stable",version:"0.1",implemented:"false"})}]),angular.module("admin").controller("ClassroomController",["$scope","$http","$q","$timeout","ApiLists","Authentication","DTOptionsBuilder","DTColumnBuilder",function($scope,$http,$q,$timeout,ApiLists,Authentication,DTOptionsBuilder,DTColumnBuilder){function ClickHandler(info){$scope.data=info._id+" - "+info.classCode}function rowCallback(nRow,aData,iDisplayIndex,iDisplayIndexFull){return $("td",nRow).unbind("click"),$("td",nRow).bind("click",function(){$scope.$apply(function(){$scope.someClickHandler(aData)})}),nRow}$scope.authentication=Authentication,$scope.apiList=ApiLists.getApiList("classroomApi");var getData=function($timeout,$q){return function(){return $q(function(resolve,reject){$timeout(function(){$http.get("/api/0.1/class/all").success(function(response){$scope.success=!0,resolve(response)}).error(function(response){$scope.error=response.message})},100)})}};$scope.someClickHandler=ClickHandler,$scope.dtOptions=DTOptionsBuilder.fromFnPromise(getData($timeout,$q)).withPaginationType("full_numbers").withOption("rowCallback",rowCallback),$scope.dtColumns=[DTColumnBuilder.newColumn("_id").withTitle("ID"),DTColumnBuilder.newColumn("classCode").withTitle("Class Code"),DTColumnBuilder.newColumn("category").withTitle("Category"),DTColumnBuilder.newColumn("number").withTitle("Number"),DTColumnBuilder.newColumn("created").withTitle("Created")]}]),angular.module("admin").controller("DashboardController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.helloText="Welcome in INSPINIA MEAN.JS Boilerplate",$scope.descriptionText="It is an application skeleton for a typical MEAN web app. You can use it to quickly bootstrap your project."}]),angular.module("admin").controller("NoteController",["$scope","$http","$q","$timeout","ApiLists","Authentication","DTOptionsBuilder","DTColumnBuilder",function($scope,$http,$q,$timeout,ApiLists,Authentication,DTOptionsBuilder,DTColumnBuilder){function ClickHandler(info){$scope.data=info._id+" - "+info.username}function rowCallback(nRow,aData,iDisplayIndex,iDisplayIndexFull){return $("td",nRow).unbind("click"),$("td",nRow).bind("click",function(){$scope.$apply(function(){$scope.someClickHandler(aData)})}),nRow}$scope.authentication=Authentication,$scope.apiList=ApiLists.getApiList("noteApi");var getData=function($timeout,$q){return function(){return $q(function(resolve,reject){$timeout(function(){$http.get("/api/0.1/notes/all").success(function(response){$scope.success=!0,resolve(response)}).error(function(response){$scope.error=response.message})},100)})}};$scope.someClickHandler=ClickHandler,$scope.dtOptions=DTOptionsBuilder.fromFnPromise(getData($timeout,$q)).withPaginationType("full_numbers").withOption("rowCallback",rowCallback),$scope.dtColumns=[DTColumnBuilder.newColumn("_id").withTitle("ID"),DTColumnBuilder.newColumn("title").withTitle("Title"),DTColumnBuilder.newColumn("type").withTitle("Type"),DTColumnBuilder.newColumn("author").withTitle("Author"),DTColumnBuilder.newColumn("created").withTitle("Created")]}]),angular.module("admin").controller("ProfController",["$scope","$http","$q","$timeout","ApiLists","Authentication","DTOptionsBuilder","DTColumnBuilder",function($scope,$http,$q,$timeout,ApiLists,Authentication,DTOptionsBuilder,DTColumnBuilder){function ClickHandler(info){$scope.data=info._id+" - "+info.Name}function rowCallback(nRow,aData,iDisplayIndex,iDisplayIndexFull){return $("td",nRow).unbind("click"),$("td",nRow).bind("click",function(){$scope.$apply(function(){$scope.someClickHandler(aData)})}),nRow}$scope.authentication=Authentication,$scope.apiList=ApiLists.getApiList("profApi");var getData=function($timeout,$q){return function(){return $q(function(resolve,reject){$timeout(function(){$http.get("/api/0.1/prof/all").success(function(response){$scope.success=!0,resolve(response)}).error(function(response){$scope.error=response.message})},100)})}};$scope.someClickHandler=ClickHandler,$scope.dtOptions=DTOptionsBuilder.fromFnPromise(getData($timeout,$q)).withPaginationType("full_numbers").withOption("rowCallback",rowCallback),$scope.dtColumns=[DTColumnBuilder.newColumn("_id").withTitle("ID"),DTColumnBuilder.newColumn("name").withTitle("Name"),DTColumnBuilder.newColumn("department").withTitle("Department"),DTColumnBuilder.newColumn("created").withTitle("Created")]}]),angular.module("admin").controller("UserController",["$scope","$http","$q","$timeout","ApiLists","Authentication","DTOptionsBuilder","DTColumnBuilder","Upload",function($scope,$http,$q,$timeout,ApiLists,Authentication,DTOptionsBuilder,DTColumnBuilder,Upload){$scope.authentication=Authentication,$scope.avatarImage="",$scope.croppedAvatarImage="",$scope.apiList=ApiLists.getApiList("userApi"),$scope.update=function(){$http.put("/api/0.1/user/"+$scope.data._id,$scope.data).success(function(){alert("success!")}).error(function(err){console.log(err)})},$scope["delete"]=function(){$http["delete"]("/api/0.1/user/"+$scope.data._id).success(function(){alert("success!")}).error(function(err){console.log(err)})},$scope.clear=function(){$scope.data=[]},$scope.create=function(){$http.post("/api/0.1/user",$scope.data).success(function(){alert("success!")}).error(function(err){console.log(err)})},$scope.uploadAvatar=function(image){console.log(image),$scope.uploadInProgress=!0,$scope.uploadProgress=0,angular.isArray(image)&&(image=image[0]),Upload.upload({url:"/api/v1/user/me/avatar",headers:{"Content-Type":"multipart/form-data"},method:"POST",data:{file:image}}).success(function(data,status,headers,config){console.log("upload success!"),$scope.$apply()}).error(function(err){$scope.uploadInProgress=!1,console.log("upload failed!")})};var showAvatarModal=function(image){var file=image.currentTarget.files[0],reader=new FileReader;reader.onload=function(image){$scope.$apply(function($scope){$scope.avatarImage=image.target.result})},reader.readAsDataURL(file)};angular.element(document.querySelector("#fileInput")).on("change",showAvatarModal);var getData=function($timeout,$q){return function(){return $q(function(resolve){$timeout(function(){$http.get("/api/0.1/user/all").success(function(response){$scope.success=!0,resolve(response)}).error(function(response){$scope.error=response.message})},100)})}},rowCallback=function(nRow,aData){return $("td",nRow).unbind("click"),$("td",nRow).bind("click",function(){$scope.$apply(function(){$scope.data=aData})}),nRow};$scope.dtOptions=DTOptionsBuilder.fromFnPromise(getData($timeout,$q)).withPaginationType("full_numbers").withOption("rowCallback",rowCallback),$scope.dtColumns=[DTColumnBuilder.newColumn("_id").withTitle("ID"),DTColumnBuilder.newColumn("username").withTitle("Username"),DTColumnBuilder.newColumn("email").withTitle("Email"),DTColumnBuilder.newColumn("roles").withTitle("Roles"),DTColumnBuilder.newColumn("created").withTitle("Created")]}]),angular.module("admin").service("ApiLists",[function(){this.apiLists={},this.validateApiExistance=function(apiListId){if(apiListId&&apiListId.length){if(this.apiLists[apiListId])return!0;throw new Error("Api List does not exist")}throw new Error("Api List was not provided")},this.getApiList=function(apiListId){return this.validateApiExistance(apiListId),this.apiLists[apiListId]},this.addApiList=function(apiListId,options){return options=options||{},this.apiLists[apiListId]={items:options.items||[]},this.apiLists[apiListId]},this.removeApiList=function(apiListId){this.validateApiExistance(apiListId),delete this.apiLists[apiListId]},this.addApiItem=function(apiListId,options){return options=options||{},this.validateApiExistance(apiListId),this.apiLists[apiListId].items.push({url:options.url||"None",method:options.method||"None",description:options.description||"None",state:options.state||"Inactive",role:options.role||"admin",version:options.version||"",implemented:options.implemented||"true"}),this.apiLists[apiListId]},this.removeApiItem=function(apiListId,apiItemUrl){this.validateApiExistance(apiListId);for(var itemIndex in this.apiLists[apiListId].items)this.apiLists[apiListId].items[itemIndex].url===apiItemUrl&&this.apiLists[apiListId].items.splice(itemIndex,1);return this.apiLists[apiListId]}}]),angular.module("classrooms").run(["Menus",function(Menus){Menus.addMenuItem("sidebar",{title:"My Classrooms",iconClass:"fa-edit",state:"classroom",type:"dropdown"}),Menus.addSubMenuItem("sidebar","classroom",{title:"Class1",state:"classroom"})}]),angular.module("classrooms").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("classroom",{url:"/classroom",templateUrl:"modules/classrooms/views/classrooms.client.view.html"})}]),angular.module("classrooms").controller("DashboardController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.helloText="Welcome in INSPINIA MEAN.JS Boilerplate",$scope.descriptionText="It is an application skeleton for a typical MEAN web app. You can use it to quickly bootstrap your project."}]),angular.module("core").run(["$rootScope","$location",function($rootScope,$location){$rootScope.location=$location}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("sidebar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.helloText="Welcome in INSPINIA MEAN.JS Boilerplate",$scope.descriptionText="It is an application skeleton for a typical MEAN web app. You can use it to quickly bootstrap your project."}]),angular.module("core").directive("sideNavigation",["$timeout",function($timeout){return{restrict:"A",link:function(scope,element){scope.$watch("authentication.user",function(){$timeout(function(){element.metisMenu()})})}}}]).directive("minimalizaSidebar",["$timeout",function($timeout){return{restrict:"A",template:'<a class="navbar-minimalize minimalize-styl-2 btn btn-primary " href="" ng-click="minimalize()"><i class="fa fa-bars"></i></a>',controller:["$scope","$element",function($scope,$element){$scope.minimalize=function(){angular.element("body").toggleClass("mini-navbar"),!angular.element("body").hasClass("mini-navbar")||angular.element("body").hasClass("body-small")?(angular.element("#side-menu").hide(),$timeout(function(){angular.element("#side-menu").fadeIn(500)},100)):angular.element("#side-menu").removeAttr("style")}}]}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",iconClass:options.iconClass||"fa-laptop",type:options.type||"item","class":options["class"],isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?!0:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",isPublic:null===options.isPublic||"undefined"==typeof options.isPublic?!0:options.isPublic,roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("sidebar",{roles:["*"]})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){console.log($scope.credentials),$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);